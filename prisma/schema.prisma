// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  profile   Profile?
  quizResults QuizResult[]
  favoriteJobs FavoriteJob[]
  createdAt  DateTime @default(now())
  applications Application[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  firstName String
  lastName  String
  role      String   @default("USER")
  settings  Json?
  user      User     @relation(fields: [userId], references: [id])
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  company     String
  location    String
  description String
  salaryRange String?
  tags        Json?
  postedAt    DateTime @default(now())
  createdBy   String?
  favoriteJobs FavoriteJob[]
  applications Application[]
}

model FavoriteJob {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  job     Job    @relation(fields: [jobId], references: [id])
  jobId   Int
  createdAt DateTime @default(now())
}

model Quiz {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime?
  questions   Question[]
  results     QuizResult[]
}

model Question {
  id        Int      @id @default(autoincrement())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  text      String
  options   Json?
  correct   Int?
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  resultData Json
  score     Int
  createdAt DateTime @default(now())
}

model Application {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     Int
  message   String?
  createdAt DateTime @default(now())
}
